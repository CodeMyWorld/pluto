// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Salt is an object representing the database table.
type Salt struct {
	ID        uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UserID    uint      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Salt      string    `boil:"salt" json:"salt" toml:"salt" yaml:"salt"`

	R *saltR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L saltL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SaltColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
	UserID    string
	Salt      string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
	UserID:    "user_id",
	Salt:      "salt",
}

// Generated where

var SaltWhere = struct {
	ID        whereHelperuint
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
	UserID    whereHelperuint
	Salt      whereHelperstring
}{
	ID:        whereHelperuint{field: "`salts`.`id`"},
	CreatedAt: whereHelpernull_Time{field: "`salts`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`salts`.`updated_at`"},
	DeletedAt: whereHelpernull_Time{field: "`salts`.`deleted_at`"},
	UserID:    whereHelperuint{field: "`salts`.`user_id`"},
	Salt:      whereHelperstring{field: "`salts`.`salt`"},
}

// SaltRels is where relationship names are stored.
var SaltRels = struct {
}{}

// saltR is where relationships are stored.
type saltR struct {
}

// NewStruct creates a new relationship struct
func (*saltR) NewStruct() *saltR {
	return &saltR{}
}

// saltL is where Load methods for each relationship are stored.
type saltL struct{}

var (
	saltAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "user_id", "salt"}
	saltColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "user_id", "salt"}
	saltColumnsWithDefault    = []string{"id"}
	saltPrimaryKeyColumns     = []string{"id"}
)

type (
	// SaltSlice is an alias for a slice of pointers to Salt.
	// This should generally be used opposed to []Salt.
	SaltSlice []*Salt
	// SaltHook is the signature for custom Salt hook methods
	SaltHook func(boil.Executor, *Salt) error

	saltQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	saltType                 = reflect.TypeOf(&Salt{})
	saltMapping              = queries.MakeStructMapping(saltType)
	saltPrimaryKeyMapping, _ = queries.BindMapping(saltType, saltMapping, saltPrimaryKeyColumns)
	saltInsertCacheMut       sync.RWMutex
	saltInsertCache          = make(map[string]insertCache)
	saltUpdateCacheMut       sync.RWMutex
	saltUpdateCache          = make(map[string]updateCache)
	saltUpsertCacheMut       sync.RWMutex
	saltUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var saltBeforeInsertHooks []SaltHook
var saltBeforeUpdateHooks []SaltHook
var saltBeforeDeleteHooks []SaltHook
var saltBeforeUpsertHooks []SaltHook

var saltAfterInsertHooks []SaltHook
var saltAfterSelectHooks []SaltHook
var saltAfterUpdateHooks []SaltHook
var saltAfterDeleteHooks []SaltHook
var saltAfterUpsertHooks []SaltHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Salt) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range saltBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Salt) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range saltBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Salt) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range saltBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Salt) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range saltBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Salt) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range saltAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Salt) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range saltAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Salt) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range saltAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Salt) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range saltAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Salt) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range saltAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSaltHook registers your hook function for all future operations.
func AddSaltHook(hookPoint boil.HookPoint, saltHook SaltHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		saltBeforeInsertHooks = append(saltBeforeInsertHooks, saltHook)
	case boil.BeforeUpdateHook:
		saltBeforeUpdateHooks = append(saltBeforeUpdateHooks, saltHook)
	case boil.BeforeDeleteHook:
		saltBeforeDeleteHooks = append(saltBeforeDeleteHooks, saltHook)
	case boil.BeforeUpsertHook:
		saltBeforeUpsertHooks = append(saltBeforeUpsertHooks, saltHook)
	case boil.AfterInsertHook:
		saltAfterInsertHooks = append(saltAfterInsertHooks, saltHook)
	case boil.AfterSelectHook:
		saltAfterSelectHooks = append(saltAfterSelectHooks, saltHook)
	case boil.AfterUpdateHook:
		saltAfterUpdateHooks = append(saltAfterUpdateHooks, saltHook)
	case boil.AfterDeleteHook:
		saltAfterDeleteHooks = append(saltAfterDeleteHooks, saltHook)
	case boil.AfterUpsertHook:
		saltAfterUpsertHooks = append(saltAfterUpsertHooks, saltHook)
	}
}

// One returns a single salt record from the query.
func (q saltQuery) One(exec boil.Executor) (*Salt, error) {
	o := &Salt{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for salts")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Salt records from the query.
func (q saltQuery) All(exec boil.Executor) (SaltSlice, error) {
	var o []*Salt

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Salt slice")
	}

	if len(saltAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Salt records in the query.
func (q saltQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count salts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q saltQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if salts exists")
	}

	return count > 0, nil
}

// Salts retrieves all the records using an executor.
func Salts(mods ...qm.QueryMod) saltQuery {
	mods = append(mods, qm.From("`salts`"))
	return saltQuery{NewQuery(mods...)}
}

// FindSalt retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSalt(exec boil.Executor, iD uint, selectCols ...string) (*Salt, error) {
	saltObj := &Salt{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `salts` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, saltObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from salts")
	}

	return saltObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Salt) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no salts provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(saltColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	saltInsertCacheMut.RLock()
	cache, cached := saltInsertCache[key]
	saltInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			saltAllColumns,
			saltColumnsWithDefault,
			saltColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(saltType, saltMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(saltType, saltMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `salts` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `salts` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `salts` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, saltPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into salts")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == saltMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for salts")
	}

CacheNoHooks:
	if !cached {
		saltInsertCacheMut.Lock()
		saltInsertCache[key] = cache
		saltInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Salt.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Salt) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	saltUpdateCacheMut.RLock()
	cache, cached := saltUpdateCache[key]
	saltUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			saltAllColumns,
			saltPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update salts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `salts` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, saltPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(saltType, saltMapping, append(wl, saltPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update salts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for salts")
	}

	if !cached {
		saltUpdateCacheMut.Lock()
		saltUpdateCache[key] = cache
		saltUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q saltQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for salts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for salts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SaltSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), saltPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `salts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, saltPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in salt slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all salt")
	}
	return rowsAff, nil
}

var mySQLSaltUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Salt) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no salts provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(saltColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSaltUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	saltUpsertCacheMut.RLock()
	cache, cached := saltUpsertCache[key]
	saltUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			saltAllColumns,
			saltColumnsWithDefault,
			saltColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			saltAllColumns,
			saltPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert salts, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "salts", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `salts` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(saltType, saltMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(saltType, saltMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for salts")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == saltMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(saltType, saltMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for salts")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for salts")
	}

CacheNoHooks:
	if !cached {
		saltUpsertCacheMut.Lock()
		saltUpsertCache[key] = cache
		saltUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Salt record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Salt) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Salt provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), saltPrimaryKeyMapping)
	sql := "DELETE FROM `salts` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from salts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for salts")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q saltQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no saltQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from salts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for salts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SaltSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(saltBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), saltPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `salts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, saltPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from salt slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for salts")
	}

	if len(saltAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Salt) Reload(exec boil.Executor) error {
	ret, err := FindSalt(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SaltSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SaltSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), saltPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `salts`.* FROM `salts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, saltPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SaltSlice")
	}

	*o = slice

	return nil
}

// SaltExists checks if the Salt row exists.
func SaltExists(exec boil.Executor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `salts` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if salts exists")
	}

	return exists, nil
}
