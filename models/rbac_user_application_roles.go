// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RbacUserApplicationRole is an object representing the database table.
type RbacUserApplicationRole struct {
	ID        uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UserID    uint      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	AppID     uint      `boil:"app_id" json:"app_id" toml:"app_id" yaml:"app_id"`
	RoleID    uint      `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`

	R *rbacUserApplicationRoleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rbacUserApplicationRoleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RbacUserApplicationRoleColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
	UserID    string
	AppID     string
	RoleID    string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
	UserID:    "user_id",
	AppID:     "app_id",
	RoleID:    "role_id",
}

// Generated where

var RbacUserApplicationRoleWhere = struct {
	ID        whereHelperuint
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
	UserID    whereHelperuint
	AppID     whereHelperuint
	RoleID    whereHelperuint
}{
	ID:        whereHelperuint{field: "`rbac_user_application_roles`.`id`"},
	CreatedAt: whereHelpernull_Time{field: "`rbac_user_application_roles`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`rbac_user_application_roles`.`updated_at`"},
	DeletedAt: whereHelpernull_Time{field: "`rbac_user_application_roles`.`deleted_at`"},
	UserID:    whereHelperuint{field: "`rbac_user_application_roles`.`user_id`"},
	AppID:     whereHelperuint{field: "`rbac_user_application_roles`.`app_id`"},
	RoleID:    whereHelperuint{field: "`rbac_user_application_roles`.`role_id`"},
}

// RbacUserApplicationRoleRels is where relationship names are stored.
var RbacUserApplicationRoleRels = struct {
}{}

// rbacUserApplicationRoleR is where relationships are stored.
type rbacUserApplicationRoleR struct {
}

// NewStruct creates a new relationship struct
func (*rbacUserApplicationRoleR) NewStruct() *rbacUserApplicationRoleR {
	return &rbacUserApplicationRoleR{}
}

// rbacUserApplicationRoleL is where Load methods for each relationship are stored.
type rbacUserApplicationRoleL struct{}

var (
	rbacUserApplicationRoleAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "user_id", "app_id", "role_id"}
	rbacUserApplicationRoleColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "user_id", "app_id", "role_id"}
	rbacUserApplicationRoleColumnsWithDefault    = []string{"id"}
	rbacUserApplicationRolePrimaryKeyColumns     = []string{"id"}
)

type (
	// RbacUserApplicationRoleSlice is an alias for a slice of pointers to RbacUserApplicationRole.
	// This should generally be used opposed to []RbacUserApplicationRole.
	RbacUserApplicationRoleSlice []*RbacUserApplicationRole
	// RbacUserApplicationRoleHook is the signature for custom RbacUserApplicationRole hook methods
	RbacUserApplicationRoleHook func(boil.Executor, *RbacUserApplicationRole) error

	rbacUserApplicationRoleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rbacUserApplicationRoleType                 = reflect.TypeOf(&RbacUserApplicationRole{})
	rbacUserApplicationRoleMapping              = queries.MakeStructMapping(rbacUserApplicationRoleType)
	rbacUserApplicationRolePrimaryKeyMapping, _ = queries.BindMapping(rbacUserApplicationRoleType, rbacUserApplicationRoleMapping, rbacUserApplicationRolePrimaryKeyColumns)
	rbacUserApplicationRoleInsertCacheMut       sync.RWMutex
	rbacUserApplicationRoleInsertCache          = make(map[string]insertCache)
	rbacUserApplicationRoleUpdateCacheMut       sync.RWMutex
	rbacUserApplicationRoleUpdateCache          = make(map[string]updateCache)
	rbacUserApplicationRoleUpsertCacheMut       sync.RWMutex
	rbacUserApplicationRoleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rbacUserApplicationRoleBeforeInsertHooks []RbacUserApplicationRoleHook
var rbacUserApplicationRoleBeforeUpdateHooks []RbacUserApplicationRoleHook
var rbacUserApplicationRoleBeforeDeleteHooks []RbacUserApplicationRoleHook
var rbacUserApplicationRoleBeforeUpsertHooks []RbacUserApplicationRoleHook

var rbacUserApplicationRoleAfterInsertHooks []RbacUserApplicationRoleHook
var rbacUserApplicationRoleAfterSelectHooks []RbacUserApplicationRoleHook
var rbacUserApplicationRoleAfterUpdateHooks []RbacUserApplicationRoleHook
var rbacUserApplicationRoleAfterDeleteHooks []RbacUserApplicationRoleHook
var rbacUserApplicationRoleAfterUpsertHooks []RbacUserApplicationRoleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RbacUserApplicationRole) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range rbacUserApplicationRoleBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RbacUserApplicationRole) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range rbacUserApplicationRoleBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RbacUserApplicationRole) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range rbacUserApplicationRoleBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RbacUserApplicationRole) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range rbacUserApplicationRoleBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RbacUserApplicationRole) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range rbacUserApplicationRoleAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RbacUserApplicationRole) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range rbacUserApplicationRoleAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RbacUserApplicationRole) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range rbacUserApplicationRoleAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RbacUserApplicationRole) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range rbacUserApplicationRoleAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RbacUserApplicationRole) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range rbacUserApplicationRoleAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRbacUserApplicationRoleHook registers your hook function for all future operations.
func AddRbacUserApplicationRoleHook(hookPoint boil.HookPoint, rbacUserApplicationRoleHook RbacUserApplicationRoleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		rbacUserApplicationRoleBeforeInsertHooks = append(rbacUserApplicationRoleBeforeInsertHooks, rbacUserApplicationRoleHook)
	case boil.BeforeUpdateHook:
		rbacUserApplicationRoleBeforeUpdateHooks = append(rbacUserApplicationRoleBeforeUpdateHooks, rbacUserApplicationRoleHook)
	case boil.BeforeDeleteHook:
		rbacUserApplicationRoleBeforeDeleteHooks = append(rbacUserApplicationRoleBeforeDeleteHooks, rbacUserApplicationRoleHook)
	case boil.BeforeUpsertHook:
		rbacUserApplicationRoleBeforeUpsertHooks = append(rbacUserApplicationRoleBeforeUpsertHooks, rbacUserApplicationRoleHook)
	case boil.AfterInsertHook:
		rbacUserApplicationRoleAfterInsertHooks = append(rbacUserApplicationRoleAfterInsertHooks, rbacUserApplicationRoleHook)
	case boil.AfterSelectHook:
		rbacUserApplicationRoleAfterSelectHooks = append(rbacUserApplicationRoleAfterSelectHooks, rbacUserApplicationRoleHook)
	case boil.AfterUpdateHook:
		rbacUserApplicationRoleAfterUpdateHooks = append(rbacUserApplicationRoleAfterUpdateHooks, rbacUserApplicationRoleHook)
	case boil.AfterDeleteHook:
		rbacUserApplicationRoleAfterDeleteHooks = append(rbacUserApplicationRoleAfterDeleteHooks, rbacUserApplicationRoleHook)
	case boil.AfterUpsertHook:
		rbacUserApplicationRoleAfterUpsertHooks = append(rbacUserApplicationRoleAfterUpsertHooks, rbacUserApplicationRoleHook)
	}
}

// One returns a single rbacUserApplicationRole record from the query.
func (q rbacUserApplicationRoleQuery) One(exec boil.Executor) (*RbacUserApplicationRole, error) {
	o := &RbacUserApplicationRole{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for rbac_user_application_roles")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RbacUserApplicationRole records from the query.
func (q rbacUserApplicationRoleQuery) All(exec boil.Executor) (RbacUserApplicationRoleSlice, error) {
	var o []*RbacUserApplicationRole

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RbacUserApplicationRole slice")
	}

	if len(rbacUserApplicationRoleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RbacUserApplicationRole records in the query.
func (q rbacUserApplicationRoleQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count rbac_user_application_roles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q rbacUserApplicationRoleQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if rbac_user_application_roles exists")
	}

	return count > 0, nil
}

// RbacUserApplicationRoles retrieves all the records using an executor.
func RbacUserApplicationRoles(mods ...qm.QueryMod) rbacUserApplicationRoleQuery {
	mods = append(mods, qm.From("`rbac_user_application_roles`"))
	return rbacUserApplicationRoleQuery{NewQuery(mods...)}
}

// FindRbacUserApplicationRole retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRbacUserApplicationRole(exec boil.Executor, iD uint, selectCols ...string) (*RbacUserApplicationRole, error) {
	rbacUserApplicationRoleObj := &RbacUserApplicationRole{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `rbac_user_application_roles` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, rbacUserApplicationRoleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from rbac_user_application_roles")
	}

	return rbacUserApplicationRoleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RbacUserApplicationRole) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rbac_user_application_roles provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rbacUserApplicationRoleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rbacUserApplicationRoleInsertCacheMut.RLock()
	cache, cached := rbacUserApplicationRoleInsertCache[key]
	rbacUserApplicationRoleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rbacUserApplicationRoleAllColumns,
			rbacUserApplicationRoleColumnsWithDefault,
			rbacUserApplicationRoleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rbacUserApplicationRoleType, rbacUserApplicationRoleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rbacUserApplicationRoleType, rbacUserApplicationRoleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `rbac_user_application_roles` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `rbac_user_application_roles` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `rbac_user_application_roles` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, rbacUserApplicationRolePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into rbac_user_application_roles")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == rbacUserApplicationRoleMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for rbac_user_application_roles")
	}

CacheNoHooks:
	if !cached {
		rbacUserApplicationRoleInsertCacheMut.Lock()
		rbacUserApplicationRoleInsertCache[key] = cache
		rbacUserApplicationRoleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the RbacUserApplicationRole.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RbacUserApplicationRole) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rbacUserApplicationRoleUpdateCacheMut.RLock()
	cache, cached := rbacUserApplicationRoleUpdateCache[key]
	rbacUserApplicationRoleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rbacUserApplicationRoleAllColumns,
			rbacUserApplicationRolePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update rbac_user_application_roles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `rbac_user_application_roles` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, rbacUserApplicationRolePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rbacUserApplicationRoleType, rbacUserApplicationRoleMapping, append(wl, rbacUserApplicationRolePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update rbac_user_application_roles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for rbac_user_application_roles")
	}

	if !cached {
		rbacUserApplicationRoleUpdateCacheMut.Lock()
		rbacUserApplicationRoleUpdateCache[key] = cache
		rbacUserApplicationRoleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q rbacUserApplicationRoleQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for rbac_user_application_roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for rbac_user_application_roles")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RbacUserApplicationRoleSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rbacUserApplicationRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `rbac_user_application_roles` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rbacUserApplicationRolePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in rbacUserApplicationRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all rbacUserApplicationRole")
	}
	return rowsAff, nil
}

var mySQLRbacUserApplicationRoleUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RbacUserApplicationRole) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rbac_user_application_roles provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rbacUserApplicationRoleColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRbacUserApplicationRoleUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rbacUserApplicationRoleUpsertCacheMut.RLock()
	cache, cached := rbacUserApplicationRoleUpsertCache[key]
	rbacUserApplicationRoleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			rbacUserApplicationRoleAllColumns,
			rbacUserApplicationRoleColumnsWithDefault,
			rbacUserApplicationRoleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			rbacUserApplicationRoleAllColumns,
			rbacUserApplicationRolePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert rbac_user_application_roles, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "rbac_user_application_roles", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `rbac_user_application_roles` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(rbacUserApplicationRoleType, rbacUserApplicationRoleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rbacUserApplicationRoleType, rbacUserApplicationRoleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for rbac_user_application_roles")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == rbacUserApplicationRoleMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(rbacUserApplicationRoleType, rbacUserApplicationRoleMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for rbac_user_application_roles")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for rbac_user_application_roles")
	}

CacheNoHooks:
	if !cached {
		rbacUserApplicationRoleUpsertCacheMut.Lock()
		rbacUserApplicationRoleUpsertCache[key] = cache
		rbacUserApplicationRoleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single RbacUserApplicationRole record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RbacUserApplicationRole) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RbacUserApplicationRole provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rbacUserApplicationRolePrimaryKeyMapping)
	sql := "DELETE FROM `rbac_user_application_roles` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from rbac_user_application_roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for rbac_user_application_roles")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rbacUserApplicationRoleQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rbacUserApplicationRoleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rbac_user_application_roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rbac_user_application_roles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RbacUserApplicationRoleSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(rbacUserApplicationRoleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rbacUserApplicationRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `rbac_user_application_roles` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rbacUserApplicationRolePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rbacUserApplicationRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rbac_user_application_roles")
	}

	if len(rbacUserApplicationRoleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RbacUserApplicationRole) Reload(exec boil.Executor) error {
	ret, err := FindRbacUserApplicationRole(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RbacUserApplicationRoleSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RbacUserApplicationRoleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rbacUserApplicationRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `rbac_user_application_roles`.* FROM `rbac_user_application_roles` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rbacUserApplicationRolePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RbacUserApplicationRoleSlice")
	}

	*o = slice

	return nil
}

// RbacUserApplicationRoleExists checks if the RbacUserApplicationRole row exists.
func RbacUserApplicationRoleExists(exec boil.Executor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `rbac_user_application_roles` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if rbac_user_application_roles exists")
	}

	return exists, nil
}
