// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// OauthAuthorizationCode is an object representing the database table.
type OauthAuthorizationCode struct {
	ID          uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt   null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UserID      uint      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ClientID    uint      `boil:"client_id" json:"client_id" toml:"client_id" yaml:"client_id"`
	AppID       uint      `boil:"app_id" json:"app_id" toml:"app_id" yaml:"app_id"`
	Code        string    `boil:"code" json:"code" toml:"code" yaml:"code"`
	RedirectURI string    `boil:"redirect_uri" json:"redirect_uri" toml:"redirect_uri" yaml:"redirect_uri"`
	ExpireAt    time.Time `boil:"expire_at" json:"expire_at" toml:"expire_at" yaml:"expire_at"`
	Scopes      string    `boil:"scopes" json:"scopes" toml:"scopes" yaml:"scopes"`

	R *oauthAuthorizationCodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L oauthAuthorizationCodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OauthAuthorizationCodeColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
	UserID      string
	ClientID    string
	AppID       string
	Code        string
	RedirectURI string
	ExpireAt    string
	Scopes      string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
	UserID:      "user_id",
	ClientID:    "client_id",
	AppID:       "app_id",
	Code:        "code",
	RedirectURI: "redirect_uri",
	ExpireAt:    "expire_at",
	Scopes:      "scopes",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var OauthAuthorizationCodeWhere = struct {
	ID          whereHelperuint
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
	DeletedAt   whereHelpernull_Time
	UserID      whereHelperuint
	ClientID    whereHelperuint
	AppID       whereHelperuint
	Code        whereHelperstring
	RedirectURI whereHelperstring
	ExpireAt    whereHelpertime_Time
	Scopes      whereHelperstring
}{
	ID:          whereHelperuint{field: "`oauth_authorization_codes`.`id`"},
	CreatedAt:   whereHelpernull_Time{field: "`oauth_authorization_codes`.`created_at`"},
	UpdatedAt:   whereHelpernull_Time{field: "`oauth_authorization_codes`.`updated_at`"},
	DeletedAt:   whereHelpernull_Time{field: "`oauth_authorization_codes`.`deleted_at`"},
	UserID:      whereHelperuint{field: "`oauth_authorization_codes`.`user_id`"},
	ClientID:    whereHelperuint{field: "`oauth_authorization_codes`.`client_id`"},
	AppID:       whereHelperuint{field: "`oauth_authorization_codes`.`app_id`"},
	Code:        whereHelperstring{field: "`oauth_authorization_codes`.`code`"},
	RedirectURI: whereHelperstring{field: "`oauth_authorization_codes`.`redirect_uri`"},
	ExpireAt:    whereHelpertime_Time{field: "`oauth_authorization_codes`.`expire_at`"},
	Scopes:      whereHelperstring{field: "`oauth_authorization_codes`.`scopes`"},
}

// OauthAuthorizationCodeRels is where relationship names are stored.
var OauthAuthorizationCodeRels = struct {
}{}

// oauthAuthorizationCodeR is where relationships are stored.
type oauthAuthorizationCodeR struct {
}

// NewStruct creates a new relationship struct
func (*oauthAuthorizationCodeR) NewStruct() *oauthAuthorizationCodeR {
	return &oauthAuthorizationCodeR{}
}

// oauthAuthorizationCodeL is where Load methods for each relationship are stored.
type oauthAuthorizationCodeL struct{}

var (
	oauthAuthorizationCodeAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "user_id", "client_id", "app_id", "code", "redirect_uri", "expire_at", "scopes"}
	oauthAuthorizationCodeColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "user_id", "client_id", "app_id", "code", "redirect_uri", "scopes"}
	oauthAuthorizationCodeColumnsWithDefault    = []string{"id", "expire_at"}
	oauthAuthorizationCodePrimaryKeyColumns     = []string{"id"}
)

type (
	// OauthAuthorizationCodeSlice is an alias for a slice of pointers to OauthAuthorizationCode.
	// This should generally be used opposed to []OauthAuthorizationCode.
	OauthAuthorizationCodeSlice []*OauthAuthorizationCode
	// OauthAuthorizationCodeHook is the signature for custom OauthAuthorizationCode hook methods
	OauthAuthorizationCodeHook func(boil.Executor, *OauthAuthorizationCode) error

	oauthAuthorizationCodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	oauthAuthorizationCodeType                 = reflect.TypeOf(&OauthAuthorizationCode{})
	oauthAuthorizationCodeMapping              = queries.MakeStructMapping(oauthAuthorizationCodeType)
	oauthAuthorizationCodePrimaryKeyMapping, _ = queries.BindMapping(oauthAuthorizationCodeType, oauthAuthorizationCodeMapping, oauthAuthorizationCodePrimaryKeyColumns)
	oauthAuthorizationCodeInsertCacheMut       sync.RWMutex
	oauthAuthorizationCodeInsertCache          = make(map[string]insertCache)
	oauthAuthorizationCodeUpdateCacheMut       sync.RWMutex
	oauthAuthorizationCodeUpdateCache          = make(map[string]updateCache)
	oauthAuthorizationCodeUpsertCacheMut       sync.RWMutex
	oauthAuthorizationCodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var oauthAuthorizationCodeBeforeInsertHooks []OauthAuthorizationCodeHook
var oauthAuthorizationCodeBeforeUpdateHooks []OauthAuthorizationCodeHook
var oauthAuthorizationCodeBeforeDeleteHooks []OauthAuthorizationCodeHook
var oauthAuthorizationCodeBeforeUpsertHooks []OauthAuthorizationCodeHook

var oauthAuthorizationCodeAfterInsertHooks []OauthAuthorizationCodeHook
var oauthAuthorizationCodeAfterSelectHooks []OauthAuthorizationCodeHook
var oauthAuthorizationCodeAfterUpdateHooks []OauthAuthorizationCodeHook
var oauthAuthorizationCodeAfterDeleteHooks []OauthAuthorizationCodeHook
var oauthAuthorizationCodeAfterUpsertHooks []OauthAuthorizationCodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OauthAuthorizationCode) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range oauthAuthorizationCodeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OauthAuthorizationCode) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range oauthAuthorizationCodeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OauthAuthorizationCode) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range oauthAuthorizationCodeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OauthAuthorizationCode) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range oauthAuthorizationCodeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OauthAuthorizationCode) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range oauthAuthorizationCodeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OauthAuthorizationCode) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range oauthAuthorizationCodeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OauthAuthorizationCode) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range oauthAuthorizationCodeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OauthAuthorizationCode) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range oauthAuthorizationCodeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OauthAuthorizationCode) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range oauthAuthorizationCodeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOauthAuthorizationCodeHook registers your hook function for all future operations.
func AddOauthAuthorizationCodeHook(hookPoint boil.HookPoint, oauthAuthorizationCodeHook OauthAuthorizationCodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		oauthAuthorizationCodeBeforeInsertHooks = append(oauthAuthorizationCodeBeforeInsertHooks, oauthAuthorizationCodeHook)
	case boil.BeforeUpdateHook:
		oauthAuthorizationCodeBeforeUpdateHooks = append(oauthAuthorizationCodeBeforeUpdateHooks, oauthAuthorizationCodeHook)
	case boil.BeforeDeleteHook:
		oauthAuthorizationCodeBeforeDeleteHooks = append(oauthAuthorizationCodeBeforeDeleteHooks, oauthAuthorizationCodeHook)
	case boil.BeforeUpsertHook:
		oauthAuthorizationCodeBeforeUpsertHooks = append(oauthAuthorizationCodeBeforeUpsertHooks, oauthAuthorizationCodeHook)
	case boil.AfterInsertHook:
		oauthAuthorizationCodeAfterInsertHooks = append(oauthAuthorizationCodeAfterInsertHooks, oauthAuthorizationCodeHook)
	case boil.AfterSelectHook:
		oauthAuthorizationCodeAfterSelectHooks = append(oauthAuthorizationCodeAfterSelectHooks, oauthAuthorizationCodeHook)
	case boil.AfterUpdateHook:
		oauthAuthorizationCodeAfterUpdateHooks = append(oauthAuthorizationCodeAfterUpdateHooks, oauthAuthorizationCodeHook)
	case boil.AfterDeleteHook:
		oauthAuthorizationCodeAfterDeleteHooks = append(oauthAuthorizationCodeAfterDeleteHooks, oauthAuthorizationCodeHook)
	case boil.AfterUpsertHook:
		oauthAuthorizationCodeAfterUpsertHooks = append(oauthAuthorizationCodeAfterUpsertHooks, oauthAuthorizationCodeHook)
	}
}

// One returns a single oauthAuthorizationCode record from the query.
func (q oauthAuthorizationCodeQuery) One(exec boil.Executor) (*OauthAuthorizationCode, error) {
	o := &OauthAuthorizationCode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for oauth_authorization_codes")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OauthAuthorizationCode records from the query.
func (q oauthAuthorizationCodeQuery) All(exec boil.Executor) (OauthAuthorizationCodeSlice, error) {
	var o []*OauthAuthorizationCode

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OauthAuthorizationCode slice")
	}

	if len(oauthAuthorizationCodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OauthAuthorizationCode records in the query.
func (q oauthAuthorizationCodeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count oauth_authorization_codes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q oauthAuthorizationCodeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if oauth_authorization_codes exists")
	}

	return count > 0, nil
}

// OauthAuthorizationCodes retrieves all the records using an executor.
func OauthAuthorizationCodes(mods ...qm.QueryMod) oauthAuthorizationCodeQuery {
	mods = append(mods, qm.From("`oauth_authorization_codes`"))
	return oauthAuthorizationCodeQuery{NewQuery(mods...)}
}

// FindOauthAuthorizationCode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOauthAuthorizationCode(exec boil.Executor, iD uint, selectCols ...string) (*OauthAuthorizationCode, error) {
	oauthAuthorizationCodeObj := &OauthAuthorizationCode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `oauth_authorization_codes` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, oauthAuthorizationCodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from oauth_authorization_codes")
	}

	return oauthAuthorizationCodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OauthAuthorizationCode) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no oauth_authorization_codes provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oauthAuthorizationCodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	oauthAuthorizationCodeInsertCacheMut.RLock()
	cache, cached := oauthAuthorizationCodeInsertCache[key]
	oauthAuthorizationCodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			oauthAuthorizationCodeAllColumns,
			oauthAuthorizationCodeColumnsWithDefault,
			oauthAuthorizationCodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(oauthAuthorizationCodeType, oauthAuthorizationCodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(oauthAuthorizationCodeType, oauthAuthorizationCodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `oauth_authorization_codes` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `oauth_authorization_codes` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `oauth_authorization_codes` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, oauthAuthorizationCodePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into oauth_authorization_codes")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == oauthAuthorizationCodeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for oauth_authorization_codes")
	}

CacheNoHooks:
	if !cached {
		oauthAuthorizationCodeInsertCacheMut.Lock()
		oauthAuthorizationCodeInsertCache[key] = cache
		oauthAuthorizationCodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the OauthAuthorizationCode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OauthAuthorizationCode) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	oauthAuthorizationCodeUpdateCacheMut.RLock()
	cache, cached := oauthAuthorizationCodeUpdateCache[key]
	oauthAuthorizationCodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			oauthAuthorizationCodeAllColumns,
			oauthAuthorizationCodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update oauth_authorization_codes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `oauth_authorization_codes` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, oauthAuthorizationCodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(oauthAuthorizationCodeType, oauthAuthorizationCodeMapping, append(wl, oauthAuthorizationCodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update oauth_authorization_codes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for oauth_authorization_codes")
	}

	if !cached {
		oauthAuthorizationCodeUpdateCacheMut.Lock()
		oauthAuthorizationCodeUpdateCache[key] = cache
		oauthAuthorizationCodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q oauthAuthorizationCodeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for oauth_authorization_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for oauth_authorization_codes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OauthAuthorizationCodeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oauthAuthorizationCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `oauth_authorization_codes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, oauthAuthorizationCodePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in oauthAuthorizationCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all oauthAuthorizationCode")
	}
	return rowsAff, nil
}

var mySQLOauthAuthorizationCodeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OauthAuthorizationCode) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no oauth_authorization_codes provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oauthAuthorizationCodeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOauthAuthorizationCodeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	oauthAuthorizationCodeUpsertCacheMut.RLock()
	cache, cached := oauthAuthorizationCodeUpsertCache[key]
	oauthAuthorizationCodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			oauthAuthorizationCodeAllColumns,
			oauthAuthorizationCodeColumnsWithDefault,
			oauthAuthorizationCodeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			oauthAuthorizationCodeAllColumns,
			oauthAuthorizationCodePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert oauth_authorization_codes, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "oauth_authorization_codes", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `oauth_authorization_codes` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(oauthAuthorizationCodeType, oauthAuthorizationCodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(oauthAuthorizationCodeType, oauthAuthorizationCodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for oauth_authorization_codes")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == oauthAuthorizationCodeMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(oauthAuthorizationCodeType, oauthAuthorizationCodeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for oauth_authorization_codes")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for oauth_authorization_codes")
	}

CacheNoHooks:
	if !cached {
		oauthAuthorizationCodeUpsertCacheMut.Lock()
		oauthAuthorizationCodeUpsertCache[key] = cache
		oauthAuthorizationCodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single OauthAuthorizationCode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OauthAuthorizationCode) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OauthAuthorizationCode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), oauthAuthorizationCodePrimaryKeyMapping)
	sql := "DELETE FROM `oauth_authorization_codes` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from oauth_authorization_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for oauth_authorization_codes")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q oauthAuthorizationCodeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no oauthAuthorizationCodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from oauth_authorization_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for oauth_authorization_codes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OauthAuthorizationCodeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(oauthAuthorizationCodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oauthAuthorizationCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `oauth_authorization_codes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, oauthAuthorizationCodePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from oauthAuthorizationCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for oauth_authorization_codes")
	}

	if len(oauthAuthorizationCodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OauthAuthorizationCode) Reload(exec boil.Executor) error {
	ret, err := FindOauthAuthorizationCode(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OauthAuthorizationCodeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OauthAuthorizationCodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oauthAuthorizationCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `oauth_authorization_codes`.* FROM `oauth_authorization_codes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, oauthAuthorizationCodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OauthAuthorizationCodeSlice")
	}

	*o = slice

	return nil
}

// OauthAuthorizationCodeExists checks if the OauthAuthorizationCode row exists.
func OauthAuthorizationCodeExists(exec boil.Executor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `oauth_authorization_codes` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if oauth_authorization_codes exists")
	}

	return exists, nil
}
